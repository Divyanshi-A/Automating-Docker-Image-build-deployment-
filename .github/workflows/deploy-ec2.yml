name: Deploy to EC2

on:
  push:
    branches:
      - main


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Add EC2 host key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ec2-user
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 400 key.pem
          ssh -i key.pem $EC2_USER@$EC2_HOST "echo 'Successfully connected to EC2'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker --version && echo 'Docker is installed'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker pull divyanshia/automate:latest && echo 'Image pulled successfully'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker stop my-stopwatch-app || true && echo 'Stopped old container (if existed)'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker rm my-stopwatch-app || true && echo 'Removed old container (if existed)'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker run -d -p 80:8080 --name my-stopwatch-app divyanshia/automate:latest && echo 'New container started'"
          ssh -i key.pem $EC2_USER@$EC2_HOST "sudo docker logs my-stopwatch-app"
          rm key.pem
